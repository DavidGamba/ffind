#!/usr/bin/perl -w
use strict;
our $VERSION = '0.2';
my $version_info = <<EOL;
ffind $VERSION
Copyright © 2014 David Gamba. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as Perl
itself.

Written by David Gamba, github: https://github.com/DavidGamba/ffind
EOL
use Cwd qw(cwd abs_path);
use File::Find;
use Term::ANSIColor;
use Getopt::Long qw(:config passthrough no_ignore_case);
use Pod::Usage;
use File::Spec::Functions qw( abs2rel );
use File::Basename;
my $color = 'auto';
GetOptions(
    'h|?'           => sub { pod2usage( -verbose => 0 ) },
    'help'          => \&show_man,
    'version'       => sub { print $version_info; exit 1; },
    'c|case'        => \my $case,
    'f'             => \my $type_file,
    'd'             => \my $type_dir,
    'hidden'        => \my $hidden,
    'vcs'           => \my $vcs,
    'type=s'        => \my $type,
    'full|fullpath' => \my $fullpath,
    'color=s'       => \$color,
);

sub show_man
{
  my $script_dir = undef;
  if(-l __FILE__) {
    $script_dir = dirname(readlink(__FILE__));
  }
  else {
    $script_dir = dirname(__FILE__);
  }
  if (-f "$script_dir/ffind.1") {
    exec('man', '-l', "$script_dir/ffind.1");
  }
  else {
    exec('man', 'ffind');
  }
}

my $arg1 = shift;
my $arg2 = shift;
my $file_pattern = undef;
my $dir         = undef;
if( defined $arg2 ) {
  $dir          = $arg1;
  $file_pattern = $arg2;
}
else {
  $file_pattern = $arg1;
}
pod2usage("[ERROR] Missing file_pattern!\n") unless $file_pattern;

my $vcs_regex    = qr/(?:\.svn\/.*|\.git\/?.*)$/;
my $hidden_regex = qr/^\./;

END { close STDOUT }
if (-t STDOUT) {
    my $pager = $ENV{PAGER} || "less";
    open(STDOUT, "| $pager");
    $color = 'always' if $color eq 'auto';
}

my $cwd = cwd;
$dir = ($dir) ? abs_path($dir) : $cwd;
find( \&d, $dir );

close STDOUT;

exit 0;

sub d
{
    my $file = $File::Find::name;
    $file = abs_path($file);
    my $basename = basename($file);
    return if ! -f $file and ( $type_file or $type and $type eq 'f' );
    return if ! -d $file and ( $type_dir  or $type and $type eq 'd' );
    return if ! $vcs and $file =~ /$vcs_regex/o;
    return if ! $hidden and $basename =~ /$hidden_regex/o;
    my ($pre, $match, $post);
    if($case) {
      return if $basename !~ /^(.*?)($file_pattern)(.*)$/o;
      $pre = $1;
      $match = $2;
      $post = $3;
    }
    else {
      return if $basename !~ /^(.*?)($file_pattern)(.*)$/oi;
      $pre = $1;
      $match = $2;
      $post = $3;
    }
    my $dirname = dirname($file);
    $dirname = abs2rel($dirname, $cwd) unless( $fullpath );
    if ( $fullpath or abs_path($dirname) ne abs_path($cwd) ) {
      print $dirname . "/";
    }
    print_match( $pre, $match );
    while($post =~ m/^(.*?)($file_pattern)(.*)$/o) {
      $post = $3;
      print_match( $1, $2 );
    }
    print "$post\n";
}

sub print_match
{
    my ( $a, $b, $c ) = @_;
    set_color('reset');
    print $a;
    set_color('bold red');
    print $b;
    set_color('reset');
    print "$c\n" if($c);
}

sub set_color
{
    my $c = shift;
    $c ||= 'reset';
    if ( $color eq 'always' ) {
        print color "$c";
    }
    else {
        print color 'reset';
    }
}

__END__

=pod

=head1 NAME

ffind

=head1 SYNOPSIS

    ffind [<dir>] <file_pattern>
          [ [-f] [-d] [--type <f|d>] ]
          [--full|--full-path]
          [--hidden]
          [--vcs]
          [--color <never|auto|always>]

    ffind [-h |-?]       # shows short help
    ffind [--help]       # shows the man page

=head1 AUTHOR

David Gamba, davidgamba at gmail.com

=head1 LICENSE

Copyright © 2014 David Gamba. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as Perl
itself.

=cut
